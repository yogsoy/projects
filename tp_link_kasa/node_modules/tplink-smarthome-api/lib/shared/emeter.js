"use strict";

function _classPrivateFieldLooseBase(receiver, privateKey) { if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) { throw new TypeError("attempted to use private field on non-instance"); } return receiver; }

var id = 0;

function _classPrivateFieldLooseKey(name) { return "__private_" + id++ + "_" + name; }

/**
 * Emeter
 */
class Emeter {
  constructor(device, apiModuleName, childId = null) {
    Object.defineProperty(this, _realtime, {
      writable: true,
      value: {}
    });
    this.device = device;
    this.apiModuleName = apiModuleName;
    this.childId = childId;
  }
  /**
   * Returns cached results from last retrieval of `emeter.get_realtime`.
   * @return {Object}
   */


  get realtime() {
    return _classPrivateFieldLooseBase(this, _realtime)[_realtime];
  }
  /**
   * @private
   */


  set realtime(realtime) {
    const normalizedRealtime = { ...realtime
    }; // will coerce null/undefined to {}

    const normalize = (propName, propName2, multiplier) => {
      if (normalizedRealtime[propName] != null && normalizedRealtime[propName2] == null) {
        normalizedRealtime[propName2] = Math.floor(normalizedRealtime[propName] * multiplier);
      } else if (normalizedRealtime[propName] == null && normalizedRealtime[propName2] != null) {
        normalizedRealtime[propName] = normalizedRealtime[propName2] / multiplier;
      }
    };

    if (realtime != null) {
      normalize('current', 'current_ma', 1000);
      normalize('power', 'power_mw', 1000);
      normalize('total', 'total_wh', 1000);
      normalize('voltage', 'voltage_mv', 1000);
    }

    _classPrivateFieldLooseBase(this, _realtime)[_realtime] = normalizedRealtime;
    this.device.emit('emeter-realtime-update', _classPrivateFieldLooseBase(this, _realtime)[_realtime]);
  }
  /**
   * Gets device's current energy stats.
   *
   * Requests `emeter.get_realtime`. Older devices return `current`, `voltage`, etc,
   * while newer devices return `current_ma`, `voltage_mv` etc
   * This will return a normalized response including both old and new style properties for backwards compatibility.
   * Supports childId.
   * @param  {SendOptions}  [sendOptions]
   * @return {Promise<Object, ResponseError>} parsed JSON response
   */


  async getRealtime(sendOptions) {
    this.realtime = await this.device.sendCommand({
      [this.apiModuleName]: {
        get_realtime: {}
      }
    }, this.childId, sendOptions);
    return this.realtime;
  }
  /**
   * Get Daily Emeter Statistics.
   *
   * Sends `emeter.get_daystat` command. Supports childId.
   * @param  {number}       year
   * @param  {number}       month
   * @param  {SendOptions} [sendOptions]
   * @return {Promise<Object, ResponseError>} parsed JSON response
   */


  async getDayStats(year, month, sendOptions) {
    return this.device.sendCommand({
      [this.apiModuleName]: {
        get_daystat: {
          year,
          month
        }
      }
    }, this.childId, sendOptions);
  }
  /**
   * Get Monthly Emeter Statistics.
   *
   * Sends `emeter.get_monthstat` command. Supports childId.
   * @param  {number}       year
   * @param  {SendOptions} [sendOptions]
   * @return {Promise<Object, ResponseError>} parsed JSON response
   */


  async getMonthStats(year, sendOptions) {
    return this.device.sendCommand({
      [this.apiModuleName]: {
        get_monthstat: {
          year
        }
      }
    }, this.childId, sendOptions);
  }
  /**
   * Erase Emeter Statistics.
   *
   * Sends `emeter.erase_runtime_stat` command. Supports childId.
   * @param  {SendOptions} [sendOptions]
   * @return {Promise<Object, ResponseError>} parsed JSON response
   */


  async eraseStats(sendOptions) {
    return this.device.sendCommand({
      [this.apiModuleName]: {
        erase_emeter_stat: {}
      }
    }, this.childId, sendOptions);
  }

}

var _realtime = _classPrivateFieldLooseKey("realtime");

module.exports = Emeter;