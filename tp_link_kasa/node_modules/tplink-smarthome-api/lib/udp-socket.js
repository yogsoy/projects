'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const Queue = require('promise-queue');

const dgram = require('dgram');

const _require = require('tplink-smarthome-crypto'),
      encrypt = _require.encrypt,
      decrypt = _require.decrypt;

class UdpSocket {
  constructor(socketId, log) {
    this.socketId = socketId;
    this.log = log;
    this.socket = null;
    this.isBound = false;
    this.queue = new Queue(1, Infinity);
  }

  createSocket() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.log.debug(`[${_this.socketId}] UdpSocket.createSocket()`);

      if (_this.socket) {
        throw new Error('Socket Already Created');
      }

      _this.socket = dgram.createSocket('udp4');
      return new Promise((resolve, reject) => {
        _this.log.debug(`[${_this.socketId}] UdpSocket.createSocket(): attempting to bind`);

        try {
          _this.socket.bind(() => {
            _this.log.debug(`[${_this.socketId}] UdpSocket.createSocket(): listening on %j`, _this.socket.address());

            _this.isBound = true;
            resolve();
          });
        } catch (err) {
          _this.log.error(`UDP Error (bind): %s`, err);

          _this.isBound = false;
          reject(err);
        }
      });
    })();
  }

  send(payload, port, host, {
    timeout
  } = {}) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.log.debug(`[${_this2.socketId}] UdpSocket.send(%j)`, {
        payload,
        port,
        host,
        timeout
      });

      return _this2.queue.add(
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        try {
          let response = yield _this2.sendAndGetResponse(payload, port, host, timeout);
          return response;
        } catch (err) {
          _this2.log.error(`UDP Error:`, err);

          if (_this2.isBound) _this2.close();
          throw err;
        }
      }));
    })();
  }

  close() {
    this.log.debug(`[${this.socketId}] UdpSocket.close()`);
    this.socket.close();
    this.isBound = false;
  }

  destroy() {
    this.log.debug(`[${this.socketId}] UdpSocket.destroy()`);
    this.socket.destory();
    this.isBound = false;
  }

  unref() {
    return this.socket.unref();
  }
  /**
   * @private
   */


  sendAndGetResponse(payload, port, host, timeout) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      let timer;
      return new Promise((resolve, reject) => {
        const setSocketTimeout = timeout => {
          if (timer != null) clearTimeout(timer);

          if (timeout > 0) {
            timer = setTimeout(() => {
              _this3.log.debug(`[${_this3.socketId}] UdpSocket: timeout(${timeout})`);

              reject(new Error('UDP Timeout'));
            }, timeout);
          }
        };

        setSocketTimeout(timeout);

        _this3.socket.removeAllListeners('message');

        _this3.socket.removeAllListeners('close');

        _this3.socket.on('message', (msg, rinfo) => {
          let decryptedMsg;

          try {
            _this3.log.debug(`[${_this3.socketId}] UdpSocket: socket:data rinfo: %j`, rinfo);

            setSocketTimeout(0);
            decryptedMsg = decrypt(msg).toString('utf8');

            _this3.log.debug(`[${_this3.socketId}] UdpSocket: socket:data message: %s`, decryptedMsg);

            if (decryptedMsg !== '') {
              return resolve(JSON.parse(decryptedMsg));
            }

            resolve(decryptedMsg);
          } catch (err) {
            _this3.log.error('Error processing UDP message: %o\nFrom: [%j] SO_RCVBUF:[%d] msg: [%o] decryptedMsg: [%o]', err, rinfo, _this3.socket.getRecvBufferSize(), msg, decryptedMsg);

            reject(err);
          }
        });

        _this3.socket.on('close', () => {
          _this3.log.debug(`[${_this3.socketId}] UdpSocket: socket:close`);

          setSocketTimeout(0);
          reject(new Error('UDP Socket Closed'));
        });

        const encyptedPayload = encrypt(payload);

        _this3.log.debug(`[${_this3.socketId}] UdpSocket: socket:send payload.length`, encyptedPayload.length);

        _this3.socket.send(encyptedPayload, 0, encyptedPayload.length, port, host, err => {
          if (err) {
            _this3.log.debug(`[${_this3.socketId}] UdpSocket: socket:send socket:error length: ${encyptedPayload.length} SO_SNDBUF:${_this3.socket.getSendBufferSize()} `, err);

            if (_this3.isBound) _this3.close();
            reject(err);
          }
        });
      });
    })();
  }

}

module.exports = UdpSocket;